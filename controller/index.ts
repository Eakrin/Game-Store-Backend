import express from "express";
import {
  addDoc,
  collection,
  doc,
  getDocs,
  orderBy,
  query,
  setDoc,
  updateDoc,
  where
} from "firebase/firestore";
import { db } from "../firebaseConfig";
import jwt from "jsonwebtoken";
import { getDoc } from "firebase/firestore";
import multer from "multer";
import path from "path";
import fs from "fs";

import { v2 as cloudinary } from "cloudinary";
import { CloudinaryStorage } from "multer-storage-cloudinary";
import dotenv from "dotenv";

export const router = express.Router();





router.get('/', (req, res) => {
  res.send('Hello Game Store API');
});



// 1.1 ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (Register)
router.post("/register", async (req, res) => {
  try {
    const { name, email, password } = req.body;

    // ‚úÖ 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏£‡∏ö
    if (!name || !email || !password)
      return res.status(400).send({ message: "‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö" });

    // ‚úÖ 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email))
      return res.status(400).send({ message: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });

    // ‚úÖ 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 4 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)
    if (password.length < 4)
      return res.status(400).send({ message: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 4 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£" });

    // ‚úÖ 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥
    const q = query(collection(db, "users"), where("email", "==", email));
    const check = await getDocs(q);
    if (!check.empty)
      return res.status(400).send({ message: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß" });

    // ‚úÖ 5. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Firestore
    const ref = await addDoc(collection(db, "users"), {
      name,
      email,
      password, // ‚ö†Ô∏è ‡∏Ç‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏ß‡∏£ hash
      role: "user",
      createdAt: new Date(),
    });

    res.status(201).send({ message: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", id: ref.id });
  } catch (err: any) {
    console.error(err);
    res.status(500).send({ message: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", error: err.message });
  }
});



// 1.2 ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏π‡∏õ/‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)

router.put("/profile/:id", async (req, res) => {
  try {
    const { name, email, profileImage } = req.body;
    const userRef = doc(db, "users", req.params.id);

    // üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏ö key ‡∏ó‡∏µ‡πà undefined ‡∏≠‡∏≠‡∏Å
    const updateData: any = { name, email, profileImage };
    Object.keys(updateData).forEach(
      (key) => updateData[key] === undefined && delete updateData[key]
    );

    await updateDoc(userRef, updateData);
    res.send({ message: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (err: any) {
    res.status(500).send({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", error: err.message });
  }
});

// ‚úÖ 1.4 ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏° ID
router.get("/profile/:id", async (req, res) => {
  try {
    const userId = req.params.id;

    if (!userId) {
      return res.status(400).send({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ ID ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
    }

    const userRef = doc(db, "users", userId);
    const snapshot = await getDocs(query(collection(db, "users"), where("__name__", "==", userId)));

    if (snapshot.empty) {
      return res.status(404).send({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
    }
    const user = snapshot.docs[0]!.data();

    res.send({
      message: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      user: {
        id: userId,
        name: user.name,
        email: user.email,
        profileImage: user.profileImage || "",
        role: user.role || "user",
        createdAt: user.createdAt || null,
      },
    });
  } catch (err: any) {
    console.error(err);
    res.status(500).send({
      message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ",
      error: err.message,
    });
  }
});


// 1.3 Login ‡πÅ‡∏¢‡∏Å‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (User / Admin)
router.post("/login", async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!email || !password)
      return res.status(400).send({ message: "‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö" });

    const q = query(
      collection(db, "users"),
      where("email", "==", email),
      where("password", "==", password)
    );

    const snap = await getDocs(q);

    if (snap.empty)
      return res.status(401).send({ message: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });

    const user = snap.docs[0]!.data();
    const userId = snap.docs[0]!.id; // ‚úÖ ‡∏î‡∏∂‡∏á id ‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ô Firestore

    res.send({
      message: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      user: {
        id: userId, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° id
        name: user.name,
        email: user.email,
        role: user.role
      }
    });
  } catch (err: any) {
    console.error(err);
    res.status(500).send({ message: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", error: err.message });
  }
});



// ‚úÖ 1.5 ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
router.put("/profile/:id", async (req, res) => {
  try {
    const { name, email, profileImage } = req.body;
    const userId = req.params.id;

    if (!userId) {
      return res.status(400).send({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (user id)" });
    }

    const userRef = doc(db, "users", userId);

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    const updateData: any = {};
    if (name) updateData.name = name;
    if (email) updateData.email = email;
    if (profileImage) updateData.profileImage = profileImage;

    await updateDoc(userRef, updateData);

    res.send({
      message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ",
      user: { id: userId, ...updateData },
    });
  } catch (err: any) {
    console.error("‚ùå Error:", err);
    res.status(500).send({
      message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚ùå",
      error: err.message,
    });
  }
});

// 2.‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (Game Data & Search) (Admin/User) 7 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
// ‚úÖ 2.1 ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏° (Create)
router.post("/admin_add/games", async (req, res) => {
  try {
    const { name, price, category, description, imageUrl } = req.body;

    if (!name || !price || !category)
      return res.status(400).send({ message: "‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö" });

    const newGame = {
      name,
      price,
      category,
      description: description || "",
      imageUrl: imageUrl || "",
      releaseDate: new Date(),
      createdAt: new Date(),
    };

    const ref = await addDoc(collection(db, "games"), newGame);
    res.status(201).send({ message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ", id: ref.id });
  } catch (err: any) {
    console.error(err);
    res.status(500).send({ message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚ùå", error: err.message });
  }
});



// ‚úÖ 2.2 ‡∏î‡∏π‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Read All)
router.get("/admin_read/games", async (req, res) => {
  try {
    const snapshot = await getDocs(collection(db, "games"));
    const games = snapshot.docs.map((doc) => ({
      id: doc.id,
      ...doc.data(),
    }));

    res.send({
      message: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ",
      count: games.length,
      games,
    });
  } catch (err: any) {
    res.status(500).send({ message: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚ùå", error: err.message });
  }
});



// ‚úÖ 2.3 ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏Å‡∏°‡∏ï‡∏≤‡∏° ID (Read One)
router.get("/admin_search/games/:id", async (req, res) => {
  try {
    const gameRef = doc(db, "games", req.params.id);
    const gameSnap = await getDoc(gameRef);

    if (!gameSnap.exists())
      return res.status(404).send({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏° ‚ùå" });

    res.send({
      message: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ",
      game: { id: gameSnap.id, ...gameSnap.data() },
    });
  } catch (err: any) {
    res.status(500).send({ message: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚ùå", error: err.message });
  }
});



// ‚úÖ 2.4 ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏° (Update)
router.put("/admin_update/games/:id", async (req, res) => {
  try {
    const { name, price, category, description, imageUrl } = req.body;
    const gameRef = doc(db, "games", req.params.id);

    const updateData: any = {
      updatedAt: new Date(),
    };
    if (name) updateData.name = name;
    if (price) updateData.price = price;
    if (category) updateData.category = category;
    if (description) updateData.description = description;
    if (imageUrl) updateData.imageUrl = imageUrl;

    await updateDoc(gameRef, updateData);
    res.send({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ" });
  } catch (err: any) {
    res.status(500).send({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚ùå", error: err.message });
  }
});



// ‚úÖ 2.5 ‡∏•‡∏ö‡πÄ‡∏Å‡∏° (Delete)
import { deleteDoc } from "firebase/firestore"; // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á import ‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö

router.delete("/admin_delete/games/:id", async (req, res) => {
  try {
    const gameRef = doc(db, "games", req.params.id);

    // üîπ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Firestore ‡∏à‡∏£‡∏¥‡∏á ‡πÜ
    await deleteDoc(gameRef);

    res.send({ message: "‡∏•‡∏ö‡πÄ‡∏Å‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ" });
  } catch (err: any) {
    console.error("‚ùå Error deleting game:", err);
    res.status(500).send({ message: "‡∏•‡∏ö‡πÄ‡∏Å‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚ùå", error: err.message });
  }
});


dotenv.config();



dotenv.config();

// ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Cloudinary
cloudinary.config({
  cloud_name: process.env.CLOUD_NAME!,
  api_key: process.env.CLOUD_API_KEY!,
  api_secret: process.env.CLOUD_API_SECRET!,
});


// ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Storage ‡πÉ‡∏´‡πâ multer ‡πÉ‡∏ä‡πâ cloudinary
const storage = new CloudinaryStorage({
  cloudinary: cloudinary,
  params: {
    folder: "game-store", // ‚úÖ ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô Cloudinary
    allowed_formats: ["jpg", "png", "jpeg"],
    // ‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  } as any, // ‡πÄ‡∏û‡∏¥‡πà‡∏° type assertion ‡∏ñ‡πâ‡∏≤ TypeScript ‡∏¢‡∏±‡∏á error
});

const upload = multer({ storage });

// ‚úÖ ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏Å‡∏°
router.post("/admin_upload/game-image", upload.single("image"), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).send({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û" });
    }

    const { name, price, category, description } = req.body;

    // üîπ ‡πÑ‡∏î‡πâ URL ‡∏à‡∏≤‡∏Å Cloudinary
    const imageUrl = (req.file as any).path; // cloudinary ‡∏à‡∏∞‡∏™‡πà‡∏á URL ‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô req.file.path

    // üîπ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Firestore
    const gameData = {
      name,
      price: Number(price),
      category,
      description: description || "",
      imageUrl, // ‚úÖ ‡πÉ‡∏ä‡πâ URL ‡∏à‡∏≤‡∏Å Cloudinary
      createdAt: new Date(),
    };

    const ref = await addDoc(collection(db, "games"), gameData);

    res.send({
      message: "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ",
      id: ref.id,
      imageUrl,
    });
  } catch (err: any) {
    console.error("‚ùå Upload Error:", err);
    res.status(500).send({ message: "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚ùå", error: err.message });
  }
});


// ‚úÖ ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Categories)
router.get("/categories", async (req, res) => {
  try {
    const snapshot = await getDocs(collection(db, "categories"));
    const categories = snapshot.docs.map((doc) => ({
      id: doc.id,
      ...doc.data(),
    }));

    res.send({
      message: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏Å‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ",
      count: categories.length,
      categories,
    });
  } catch (err: any) {
    res.status(500).send({
      message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏Å‡∏°‡πÑ‡∏î‡πâ ‚ùå",
      error: err.message,
    });
  }
});

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà
// ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: Admin ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤ Firestore
router.post("/admin_add/category", async (req, res) => {
  try {
    const { name, description } = req.body;
    if (!name) return res.status(400).send({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏Å‡∏°" });

    const ref = await addDoc(collection(db, "categories"), {
      name,
      description: description || "",
      createdAt: new Date(),
    });

    res.status(201).send({ message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏Å‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ", id: ref.id });
  } catch (err: any) {
    res.status(500).send({ message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏Å‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚ùå", error: err.message });
  }
});


// ‚úÖ 2.6 ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏Å‡∏° (‡∏ä‡∏∑‡πà‡∏≠ / ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó) (User)
router.get("/search/games", async (req, res) => {
  try {
    const { keyword } = req.query;

    // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!keyword || keyword.toString().trim() === "") {
      return res
        .status(400)
        .send({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (keyword)" });
    }

    // üîπ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Firestore
    const snapshot = await getDocs(collection(db, "games"));
    const games = snapshot.docs.map((doc) => ({
      id: doc.id,
      ...doc.data(),
    }));

    // üîπ ‡πÅ‡∏õ‡∏•‡∏á keyword ‡πÄ‡∏õ‡πá‡∏ô lowercase ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏•‡πá‡∏Å
    const lowerKeyword = keyword.toString().toLowerCase();

    // üîπ ‡∏Å‡∏£‡∏≠‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö keyword
    const results = games.filter(
      (g: any) =>
        g.name.toLowerCase().includes(lowerKeyword) ||
        g.category.toLowerCase().includes(lowerKeyword)
    );

    res.send({
      message: `‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ ‡∏û‡∏ö ${results.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
      count: results.length,
      results,
    });
  } catch (err: any) {
    console.error("‚ùå Error searching games:", err);
    res.status(500).send({
      message: "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚ùå",
      error: err.message,
    });
  }
});






// 3.‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° (Wallet & Transaction) (User/Admin) 8 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
// User ‡πÅ‡∏™‡∏î‡∏á Wallet Balance ‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
router.get("/wallet/:userId", async (req, res) => {
  try {
    const { userId } = req.params;

    if (!userId) {
      return res.status(400).send({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (userId)" });
    }

    // üîπ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å collection 'wallets'
    const walletRef = doc(db, "wallets", userId);
    const walletSnap = await getDoc(walletRef);

    if (!walletSnap.exists()) {
      return res.status(404).send({
        userId,
        balance: 0,
      });
    }

    const walletData = walletSnap.data();

    res.send({
      userId,
      balance: walletData.balance ?? 0,
      lastUpdated: walletData.lastUpdated ?? null,
      message: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ",
    });
  } catch (err: any) {
    console.error("‚ùå Error fetching wallet:", err);
    res.status(500).send({
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏á‡∏¥‡∏ô ‚ùå",
      error: err.message,
    });
  }
});



// ‚úÖ 3.2 ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤ (Top-up)
router.post("/wallet_topup", async (req, res) => {
  try {
    const { userId, amount } = req.body;

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (!userId || amount === undefined)
      return res.status(400).send({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ userId ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô" });

    if (amount <= 0)
      return res.status(400).send({ message: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0" });

    // üîπ ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÉ‡∏ô Firestore
    const walletRef = doc(db, "wallets", userId);
    const walletSnap = await getDoc(walletRef);

    let newBalance = amount;

    if (!walletSnap.exists()) {
      // üîπ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      await setDoc(walletRef, {
        balance: amount,
        lastUpdated: new Date(),
      });
    } else {
      // üîπ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏ö‡∏ß‡∏Å‡∏¢‡∏≠‡∏î‡πÄ‡∏Å‡πà‡∏≤
      const currentBalance = walletSnap.data().balance ?? 0;
      newBalance = currentBalance + amount;

      await updateDoc(walletRef, {
        balance: newBalance,
        lastUpdated: new Date(),
      });
    }

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏•‡∏á‡πÉ‡∏ô Collection "transactions"
    await addDoc(collection(db, "transactions"), {
      userId,
      type: "topup",
      amount,
      detail: "‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö",
      createdAt: new Date(),
    });

    res.send({
      message: "‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ",
      balance: newBalance,
      added: amount,
    });
  } catch (err: any) {
    console.error("‚ùå Error top-up:", err);
    res.status(500).send({
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô ‚ùå",
      error: err.message,
    });
  }
});



// ‚úÖ 3.5 ‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤ (Withdraw)
router.post("/wallet_withdraw", async (req, res) => {
  try {
    const { userId, amount } = req.body;

    // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤
    if (!userId || amount === undefined)
      return res.status(400).send({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ userId ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏≠‡∏ô" });

    if (amount <= 0)
      return res.status(400).send({ message: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0" });

    // üîπ ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÉ‡∏ô Firestore
    const walletRef = doc(db, "wallets", userId);
    const walletSnap = await getDoc(walletRef);

    if (!walletSnap.exists())
      return res.status(404).send({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏á‡∏¥‡∏ô" });

    const currentBalance = walletSnap.data().balance ?? 0;

    // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    if (currentBalance < amount)
      return res.status(400).send({ message: "‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ñ‡∏≠‡∏ô ‚ùå" });

    const newBalance = currentBalance - amount;

    // üîπ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô Firestore
    await updateDoc(walletRef, {
      balance: newBalance,
      lastUpdated: new Date(),
    });

    // üîπ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° (transactions)
    await addDoc(collection(db, "transactions"), {
      userId,
      type: "withdraw",
      amount,
      detail: "‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤",
      createdAt: new Date(),
    });

    res.send({
      message: "‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ",
      withdrawn: amount,
      balance: newBalance,
    });
  } catch (err: any) {
    console.error("‚ùå Error withdraw:", err);
    res.status(500).send({
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô ‚ùå",
      error: err.message,
    });
  }
});




// User ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (Transaction History: ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô/‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏°)

router.get("/wallet/transactions/:userId", async (req, res) => {
  try {
    const { userId } = req.params;

    if (!userId) {
      return res.status(400).send({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ userId" });
    }

    // ‚úÖ Query ‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á user ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    const q = query(
      collection(db, "transactions"),
      where("userId", "==", userId)
    );

    const snapshot = await getDocs(q);

    if (snapshot.empty) {
      return res.status(404).send({
        message: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°",
        transactions: [],
      });
    }

    const transactions = snapshot.docs.map((doc) => ({
      id: doc.id,
      ...doc.data(),
    }));

    res.send({
      message: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ",
      count: transactions.length,
      transactions,
    });
  } catch (err: any) {
    console.error("‚ùå Error fetching transactions:", err);
    res.status(500).send({
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° ‚ùå",
      error: err.message,
    });
  }
});



// ‚úÖ 3.4 Admin ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
router.get("/admin/transactions", async (req, res) => {
  try {
    // üîπ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô
    const q = query(collection(db, "transactions"), orderBy("createdAt", "desc"));
    const snapshot = await getDocs(q);

    if (snapshot.empty) {
      return res.status(404).send({
        message: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‚ùå",
        transactions: [],
      });
    }

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á interface ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ TypeScript ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°
    interface Transaction {
      id: string;
      userId: string;
      type: string;
      amount: number;
      detail?: string;
      createdAt?: any;
    }

    // üîπ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const transactions: Transaction[] = snapshot.docs.map((doc) => {
      const data = doc.data();
      return {
        id: doc.id,
        userId: data.userId,
        type: data.type,
        amount: data.amount,
        detail: data.detail,
        createdAt: data.createdAt?.toDate
          ? data.createdAt.toDate().toISOString()
          : null,
      };
    });

    // üîπ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const usersSnap = await getDocs(collection(db, "users"));
    const userMap: Record<string, { name?: string; email?: string }> = {};

    usersSnap.docs.forEach((u) => {
      userMap[u.id] = u.data() as { name?: string; email?: string };
    });

    // üîπ ‡∏£‡∏ß‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° (‡πÅ‡∏Å‡πâ‡∏à‡∏∏‡∏î error)
    const mergedData = transactions.map((t) => ({
      ...t,
      userName: userMap[t.userId]?.name || "Unknown User",
      userEmail: userMap[t.userId]?.email || "-",
    }));

    res.send({
      message: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ",
      count: mergedData.length,
      transactions: mergedData,
    });
  } catch (err: any) {
    console.error("‚ùå Error fetching all transactions:", err);
    res.status(500).send({
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° ‚ùå",
      error: err.message,
    });
  }
});



// ‚úÖ 3.3 ‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏° (‡∏´‡∏±‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Wallet + ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° + ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ã‡∏∑‡πâ‡∏≠‡∏ã‡πâ‡∏≥)
router.post("/wallet_purchase", async (req, res) => {
  try {
    const { userId, gameName, amount } = req.body;

    // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤
    if (!userId || !gameName || !amount)
      return res.status(400).send({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ userId, gameName ‡πÅ‡∏•‡∏∞ amount" });

    // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏¢‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const checkPurchase = query(
      collection(db, "transactions"),
      where("userId", "==", userId),
      where("type", "==", "purchase"),
      where("detail", "==", `‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏° ${gameName}`)
    );
    const purchaseSnap = await getDocs(checkPurchase);

    if (!purchaseSnap.empty) {
      return res.status(400).send({
        message: `‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏° "${gameName}" ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ ‚ùå`,
      });
    }

    // üîπ ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏á‡∏¥‡∏ô
    const walletRef = doc(db, "wallets", userId);
    const walletSnap = await getDoc(walletRef);

    if (!walletSnap.exists())
      return res.status(404).send({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏á‡∏¥‡∏ô" });

    const balance = walletSnap.data().balance ?? 0;

    // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    if (balance < amount)
      return res.status(400).send({ message: "‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏° ‚ùå" });

    const newBalance = balance - amount;

    // üîπ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤
    await updateDoc(walletRef, {
      balance: newBalance,
      lastUpdated: new Date(),
    });

    // üîπ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà
    await addDoc(collection(db, "transactions"), {
      userId,
      type: "purchase",
      amount,
      detail: `‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏° ${gameName}`,
      createdAt: new Date(),
    });

    res.send({
      message: `‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏° ${gameName} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ`,
      balance: newBalance,
      spent: amount,
    });
  } catch (err: any) {
    console.error("‚ùå Error purchase:", err);
    res.status(500).send({
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏° ‚ùå",
      error: err.message,
    });
  }
});





































